<Window
    x:Class="StarResonanceDpsAnalysis.WPF.Views.DpsStatisticsView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:behaviors="clr-namespace:StarResonanceDpsAnalysis.WPF.Behaviors"
    xmlns:converters="clr-namespace:StarResonanceDpsAnalysis.WPF.Converters"
    xmlns:ctrl="clr-namespace:StarResonanceDpsAnalysis.WPF.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:lex="http://wpflocalizeextension.codeplex.com"
    xmlns:loc="clr-namespace:StarResonanceDpsAnalysis.WPF.Properties"
    xmlns:local="clr-namespace:StarResonanceDpsAnalysis.WPF.Views"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:models="clr-namespace:StarResonanceDpsAnalysis.Core.Models;assembly=StarResonanceDpsAnalysis.Core"
    xmlns:system="clr-namespace:System;assembly=System.Runtime"
    xmlns:viewModels="clr-namespace:StarResonanceDpsAnalysis.WPF.ViewModels"
    Title="{lex:Loc Key={x:Static loc:LocalizationKeys.Window_DpsStatistics_Title}}"
    Width="320"
    Height="360"
    MinWidth="300"
    MinHeight="35"
    behaviors:WindowSnapBehavior.PreventSnapMaximize="True"
    d:DataContext="{d:DesignInstance Type=viewModels:DpsStatisticsDesignTimeViewModel,
                                     IsDesignTimeCreatable=True}"
    lex:ResxLocalizationProvider.DefaultAssembly="StarResonanceDpsAnalysis.WPF"
    lex:ResxLocalizationProvider.DefaultDictionary="Resources"
    ResizeMode="CanResize"
    Style="{StaticResource TransparentWindow}"
    mc:Ignorable="d">

    <!--  WindowChrome: 开启可拉伸边界  -->
    <WindowChrome.WindowChrome>
        <WindowChrome
            CaptionHeight="0"
            GlassFrameThickness="0"
            ResizeBorderThickness="6"
            UseAeroCaptionButtons="False" />
    </WindowChrome.WindowChrome>

    <b:Interaction.Triggers>
        <b:EventTrigger EventName="Loaded">
            <b:InvokeCommandAction Command="{Binding LoadedCommand}" />
        </b:EventTrigger>
        <b:EventTrigger EventName="Unloaded">
            <b:InvokeCommandAction Command="{Binding UnloadedCommand}" />
        </b:EventTrigger>
    </b:Interaction.Triggers>

    <Window.Resources>
        <converters:DoubleNegateConverter x:Key="DoubleNegateConverter" />
        <converters:DoubleSumConverter x:Key="DoubleSumConverter" />

        <Style x:Key="TitleBar" TargetType="Border">
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="{Binding DataContext.AppConfig.Opacity, RelativeSource={RelativeSource AncestorType=Window}, Converter={StaticResource PercentToColorConverter}, ConverterParameter='#BABABA'}" />
                </Setter.Value>
            </Setter>
            <Setter Property="VerticalAlignment" Value="Top" />
            <Setter Property="Height" Value="25" />
            <Setter Property="Panel.ZIndex" Value="1" />
            <Setter Property="CornerRadius">
                <Setter.Value>
                    <CornerRadius
                        BottomLeft="0"
                        BottomRight="0"
                        TopLeft="{StaticResource MainCornerRadiusDouble}"
                        TopRight="{StaticResource MainCornerRadiusDouble}" />
                </Setter.Value>
            </Setter>

            <EventSetter Event="MouseLeftButtonDown" Handler="TitleBar_MouseLeftButtonDown" />
        </Style>

        <Style x:Key="StatisticTypeText" TargetType="TextBlock">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Foreground" Value="#FFF" />
            <Setter Property="FontFamily" Value="pack://application:,,,/Assets/Fonts/#HarmonyOS Sans SC" />
            <Setter Property="HorizontalAlignment" Value="Center" />
        </Style>

        <Style BasedOn="{StaticResource IconButtonStyle}" TargetType="Button">
            <Setter Property="FontFamily" Value="pack://application:,,,/Assets/Fonts/#iconfont" />
            <Setter Property="Background" Value="{x:Null}" />
            <Setter Property="Foreground" Value="White" />
        </Style>

        <Style x:Key="SortedDpsBorder" TargetType="Border">
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="{Binding DataContext.AppConfig.Opacity, RelativeSource={RelativeSource AncestorType=Window}, Converter={StaticResource PercentToColorConverter}, ConverterParameter='#191919'}" />
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="LoadingGrid" TargetType="Border">
            <!--  TODO: 当 DataStorage 触发 ServerConnectionStateChanged 时, 隐藏该 Grid  -->
            <Setter Property="Height" Value="5" />
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="{Binding DataContext.AppConfig.Opacity, RelativeSource={RelativeSource AncestorType=Window}, Converter={StaticResource PercentToColorConverter}, ConverterParameter='#191919'}" />
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="LoadingBlockRectangle" TargetType="Rectangle">
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="Width" Value="150" />
            <Setter Property="RenderTransform">
                <Setter.Value>
                    <TranslateTransform />
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="FooterContentBorder" TargetType="Border">
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="{Binding DataContext.AppConfig.Opacity, RelativeSource={RelativeSource AncestorType=Window}, Converter={StaticResource PercentToColorConverter}, ConverterParameter='#BABABA'}" />
                </Setter.Value>
            </Setter>
            <Setter Property="VerticalAlignment" Value="Bottom" />
            <Setter Property="Height" Value="25" />
            <Setter Property="Opacity" Value="1" />
            <Setter Property="CornerRadius">
                <Setter.Value>
                    <CornerRadius
                        BottomLeft="{StaticResource MainCornerRadiusDouble}"
                        BottomRight="{StaticResource MainCornerRadiusDouble}"
                        TopLeft="0"
                        TopRight="0" />
                </Setter.Value>
            </Setter>

            <EventSetter Event="MouseLeftButtonDown" Handler="TitleBar_MouseLeftButtonDown" />

            <Style.Triggers>
                <DataTrigger Value="True">
                    <DataTrigger.Binding>
                        <Binding
                            Converter="{StaticResource LessThanToBoolConverter}"
                            ConverterParameter="60"
                            Path="ActualHeight"
                            RelativeSource="{RelativeSource AncestorType=local:DpsStatisticsView}" />
                    </DataTrigger.Binding>
                    <DataTrigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation
                                    Storyboard.TargetProperty="Opacity"
                                    To="0"
                                    Duration="0:0:0.2" />
                            </Storyboard>
                        </BeginStoryboard>
                    </DataTrigger.EnterActions>
                    <DataTrigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation
                                    Storyboard.TargetProperty="Opacity"
                                    To="1"
                                    Duration="0:0:0.2" />
                            </Storyboard>
                        </BeginStoryboard>
                    </DataTrigger.ExitActions>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <DataTemplate x:Key="PercentageDataTemplate" DataType="{x:Type viewModels:StatisticDataViewModel}">
            <Grid HorizontalAlignment="Stretch">
                <!--  名次  -->
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="A" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="B" />
                    <ColumnDefinition Width="*" SharedSizeGroup="C" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="D" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="E" />
                </Grid.ColumnDefinitions>
                <TextBlock
                    Grid.Column="0"
                    Margin="4,0,4,0"
                    VerticalAlignment="Center"
                    FontFamily="pack://application:,,,/Assets/Fonts/#SAO Welcome TT"
                    Foreground="White">
                    <TextBlock.Text>
                        <Binding
                            Path="Index"
                            StringFormat="{}00"
                            UpdateSourceTrigger="PropertyChanged" />
                    </TextBlock.Text>
                </TextBlock>

                <!--  职业图标  -->
                <Image
                    Grid.Column="1"
                    Width="{Binding ActualHeight, ElementName=Name}"
                    Height="{Binding ActualHeight, ElementName=Name}"
                    Margin="2"
                    Source="{Binding Player.Class, Converter={StaticResource ClassesToIconConverter}, FallbackValue={StaticResource ClassesUnknownIcon}}" />
                <!--  昵称  -->
                <TextBlock
                    x:Name="Name"
                    Grid.Column="2"
                    VerticalAlignment="Center"
                    FontFamily="pack://application:,,,/Assets/Fonts/#HarmonyOS Sans SC"
                    Foreground="White">
                    <Run Text="{Binding Player.Name}" />
                    <Run Text="{lex:Loc Key={x:Static loc:LocalizationKeys.Common_Dash}}" />
                    <Run Text="{Binding Player.Spec, Converter={StaticResource ClassSpecToStringConverter}}" />
                </TextBlock>

                <!--  数值  -->
                <TextBlock
                    Grid.Column="3"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    FontFamily="pack://application:,,,/Assets/Fonts/#HarmonyOS Sans SC"
                    FontWeight="Bold"
                    Foreground="White">
                    <Run>
                        <Run.Text>
                            <MultiBinding Converter="{StaticResource HumanReadableNumberConverter}">
                                <Binding Path="Value" />
                                <Binding Path="DataContext.AppConfig.DamageDisplayType" RelativeSource="{RelativeSource AncestorType=Window}" />
                            </MultiBinding>
                        </Run.Text>
                    </Run>
                    <Run>
                        <Run.Text>
                            <MultiBinding Converter="{StaticResource DpsConverter}" StringFormat="{}[{0}]">
                                <Binding Path="Value" />
                                <Binding Path="DataContext.BattleDuration" RelativeSource="{RelativeSource AncestorType=Window}" />
                                <Binding Path="DataContext.AppConfig.DamageDisplayType" RelativeSource="{RelativeSource AncestorType=Window}" />
                            </MultiBinding>
                        </Run.Text>
                    </Run>
                </TextBlock>
                <TextBlock
                    Grid.Column="4"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    FontFamily="pack://application:,,,/Assets/Fonts/#HarmonyOS Sans SC"
                    FontWeight="Bold"
                    Foreground="White"
                    Text="{Binding Percent, StringFormat={}({0:P1})}" />

            </Grid>
        </DataTemplate>
        <DataTemplate x:Key="PopupTemplate" DataType="{x:Type viewModels:StatisticDataViewModel}">
            <StackPanel>
                <!--  Debug info with direct binding  -->
                <TextBlock
                    Margin="2"
                    FontSize="10"
                    Foreground="Yellow"
                    IsHitTestVisible="False"
                    Text="{Binding Player.Name, StringFormat='DEBUG: Player={0}'}"
                    Visibility="{Binding Debug.Enabled, Converter={StaticResource BoolToVisibilityConverter}}" />
                <!--  Show skill count  -->
                <TextBlock
                    Margin="2"
                    FontSize="10"
                    Foreground="Cyan"
                    IsHitTestVisible="False"
                    Text="{Binding SkillList.Count, StringFormat='Skills Count: {0}'}"
                    Visibility="{Binding Debug.Enabled, Converter={StaticResource BoolToVisibilityConverter}}" />
                <!--  Original popup content  -->
                <ctrl:DpsDetailPopup SkillList="{Binding SkillList}" />
            </StackPanel>
        </DataTemplate>
        <DataTemplate x:Key="ProgressBarDataTemplate" DataType="{x:Type viewModels:StatisticDataViewModel}">
            <Grid Height="36" Margin="0">
                <Button
                    Margin="1"
                    Padding="0"
                    HorizontalAlignment="Stretch"
                    HorizontalContentAlignment="Stretch"
                    Background="Transparent"
                    BorderThickness="0"
                    Command="{Binding ItemClickCommand, RelativeSource={RelativeSource AncestorType=ctrl:SortedDpsControl}}"
                    CommandParameter="{Binding}"
                    FocusVisualStyle="{x:Null}"
                    Focusable="False"
                    IsTabStop="False">
                    <Button.Style>
                        <Style TargetType="Button">
                            <Setter Property="OverridesDefaultStyle" Value="True" />
                        </Style>
                    </Button.Style>

                    <!--  simple ControlTemplate so ContentPresenter stretches to available size  -->
                    <Button.Template>
                        <ControlTemplate TargetType="Button">
                            <Border
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                                <ContentPresenter
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}" />
                            </Border>
                        </ControlTemplate>
                    </Button.Template>

                    <!--  actual visual content, will now stretch to fill the button  -->
                    <Grid HorizontalAlignment="Stretch">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <ctrl:DpsIndicatorControl
                            Grid.Column="1"
                            Margin="1"
                            HorizontalAlignment="Stretch"
                            HorizontalContentAlignment="Stretch"
                            IndicatorForeground="{Binding Player.Class, Converter={StaticResource ClassesColorConverter}}"
                            OverlayContent="{Binding}"
                            OverlayTemplate="{StaticResource PercentageDataTemplate}"
                            Percentage="{Binding PercentOfMax}"
                            PopupContent="{Binding}"
                            PopupTemplate="{StaticResource PopupTemplate}"
                            TrackOpacity="{Binding DataContext.AppConfig.Opacity, RelativeSource={RelativeSource AncestorType=Window}, Converter={StaticResource PercentToOpacityConverter}}" />
                    </Grid>
                </Button>
            </Grid>
        </DataTemplate>
    </Window.Resources>

    <!--  半透明/圆角交给内部 Border  -->
    <Border Style="{StaticResource ShadowWindowBorder}">
        <Grid CacheMode="BitmapCache">
            <Grid.RowDefinitions>
                <RowDefinition Height="25" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="25" />
            </Grid.RowDefinitions>
            <Border Style="{StaticResource TitleBar}">
                <!--  顶部栏,Grid 一般不设置属性  -->
                <Grid Margin="2">
                    <!--  统计类型标注  -->
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="120" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <!--  左侧按钮  -->
                    <Button
                        x:Name="LeftButton"
                        Grid.Column="0"
                        VerticalAlignment="Center"
                        Command="{Binding PreviousMetricTypeCommand}"
                        Content=""
                        FontSize="15" />
                    <!--  当前统计状态文字  -->
                    <TextBlock Grid.Column="1" Style="{StaticResource StatisticTypeText}">
                        <TextBlock.Text>
                            <MultiBinding Mode="OneWay" StringFormat="{}{0} ({1})">
                                <Binding Converter="{StaticResource StatisticTypeToStringConverter}" Path="StatisticIndex" />
                                <Binding Converter="{StaticResource ScopeTimeToStringConverter}" Path="ScopeTime" />
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                    <!--  右侧按钮  -->
                    <Button
                        x:Name="RightButton"
                        Grid.Column="2"
                        VerticalAlignment="Center"
                        Command="{Binding NextMetricTypeCommand}"
                        Content=""
                        FontSize="15" />
                    <!--  切换按钮  -->
                    <Button
                        x:Name="SwitchButton"
                        Grid.Column="3"
                        Command="{Binding ToggleScopeTimeCommand}"
                        Content=""
                        FontSize="12"
                        ToolTip="{lex:Loc Key={x:Static loc:LocalizationKeys.Tooltip_ToggleScope}}"
                        ToolTipService.InitialShowDelay="200"
                        ToolTipService.Placement="Mouse"
                        ToolTipService.ShowDuration="3000" />

                    <!--  刷新按钮  -->
                    <StackPanel
                        Grid.Column="4"
                        HorizontalAlignment="Right"
                        Orientation="Horizontal">
                        <!--  Test button  -->
                        <Button
                            x:Name="TestButton"
                            Width="21"
                            Command="{Binding AddTestItemCommand}"
                            Content="{lex:Loc Key={x:Static loc:LocalizationKeys.DpsStatistics_TestButton_Content}}"
                            ToolTip="{lex:Loc Key={x:Static loc:LocalizationKeys.DpsStatistics_TestButton_Tooltip}}" />
                        <!--  设置按钮  -->
                        <Button
                            x:Name="RefreshButton"
                            Width="21"
                            Command="{Binding RefreshCommand}"
                            Content="&#xE644;" />
                        <!--  设置按钮  -->
                        <Button
                            x:Name="SetButton"
                            Width="24"
                            Content="&#xE600;">
                            <b:Interaction.Behaviors>
                                <behaviors:OpenContextMenuBehavior />
                            </b:Interaction.Behaviors>
                            <Button.ContextMenu>
                                <ContextMenu Style="{StaticResource ModernContextMenu}">
                                    <!--  只给 MenuItem 应用样式，Separator 不受影响  -->
                                    <ContextMenu.Resources>
                                        <Style BasedOn="{StaticResource ModernMenuItem}" TargetType="{x:Type MenuItem}" />
                                    </ContextMenu.Resources>
                                    <MenuItem
                                        Command="{Binding OpenSettingsCommand}"
                                        Header="{lex:Loc Key={x:Static loc:LocalizationKeys.Menu_Settings}}"
                                        IsCheckable="false" />
                                    <Separator />

                                    <MenuItem
                                        Header="{lex:Loc Key={x:Static loc:LocalizationKeys.Menu_StatisticBoss}}"
                                        IsChecked="False"
                                        Style="{StaticResource CheckableMenuItem}" />
                                    <MenuItem
                                        Header="{lex:Loc Key={x:Static loc:LocalizationKeys.Menu_ShowTotal}}"
                                        IsChecked="False"
                                        Style="{StaticResource CheckableMenuItem}" />

                                    <MenuItem Header="{lex:Loc Key={x:Static loc:LocalizationKeys.Menu_PersonalMode}}" />
                                    <!--  记录设置  -->
                                    <MenuItem Header="{lex:Loc Key={x:Static loc:LocalizationKeys.Menu_RecordSettings}}" ItemContainerStyle="{StaticResource CheckableMenuItem}">
                                        <!--  pass a parameter (literal) to the command  -->
                                        <MenuItem Command="{Binding Options.SetMinimalDurationCommand}" Header="{lex:Loc Key={x:Static loc:LocalizationKeys.Menu_Record_Always}}">
                                            <MenuItem.CommandParameter>
                                                <system:Int32>-1</system:Int32>
                                            </MenuItem.CommandParameter>
                                        </MenuItem>
                                        <MenuItem
                                            Command="{Binding Options.SetMinimalDurationCommand}"
                                            Header="{lex:Loc Key={x:Static loc:LocalizationKeys.Menu_Record_Skip1Min}}"
                                            IsChecked="{Binding Options.MinimalDurationInSeconds}">
                                            <MenuItem.CommandParameter>
                                                <system:Int32>60</system:Int32>
                                            </MenuItem.CommandParameter>
                                        </MenuItem>
                                        <!--  Click="RecordSettingsMenuItem_Click"  -->
                                        <MenuItem
                                            Command="{Binding Options.SetMinimalDurationCommand}"
                                            Header="{lex:Loc Key={x:Static loc:LocalizationKeys.Menu_Record_Skip2Min}}"
                                            IsChecked="{Binding Options.MinimalDurationInSeconds}">
                                            <MenuItem.CommandParameter>
                                                <system:Int32>120</system:Int32>
                                            </MenuItem.CommandParameter>
                                        </MenuItem>
                                    </MenuItem>
                                    <!--  技能显示设置  -->
                                    <MenuItem Header="{lex:Loc Key={x:Static loc:LocalizationKeys.Menu_SkillDisplay}}" ItemContainerStyle="{StaticResource CheckableMenuItem}">
                                        <MenuItem Command="{Binding SetSkillDisplayLimitCommand}" Header="{lex:Loc Key={x:Static loc:LocalizationKeys.Menu_SkillDisplay_Top5}}">
                                            <MenuItem.CommandParameter>
                                                <system:Int32>5</system:Int32>
                                            </MenuItem.CommandParameter>
                                            <MenuItem.IsChecked>
                                                <MultiBinding Converter="{StaticResource EqualsConverter}" Mode="OneWay">
                                                    <Binding Path="CurrentStatisticData.SkillDisplayLimit" />
                                                    <Binding Path="CommandParameter" RelativeSource="{RelativeSource Self}" />
                                                </MultiBinding>
                                            </MenuItem.IsChecked>
                                        </MenuItem>
                                        <MenuItem Command="{Binding SetSkillDisplayLimitCommand}" Header="{lex:Loc Key={x:Static loc:LocalizationKeys.Menu_SkillDisplay_Top8}}">
                                            <MenuItem.CommandParameter>
                                                <system:Int32>8</system:Int32>
                                            </MenuItem.CommandParameter>
                                            <MenuItem.IsChecked>
                                                <MultiBinding Converter="{StaticResource EqualsConverter}" Mode="OneWay">
                                                    <Binding Path="CurrentStatisticData.SkillDisplayLimit" />
                                                    <Binding Path="CommandParameter" RelativeSource="{RelativeSource Self}" />
                                                </MultiBinding>
                                            </MenuItem.IsChecked>
                                        </MenuItem>
                                        <MenuItem Command="{Binding SetSkillDisplayLimitCommand}" Header="{lex:Loc Key={x:Static loc:LocalizationKeys.Menu_SkillDisplay_Top10}}">
                                            <MenuItem.CommandParameter>
                                                <system:Int32>10</system:Int32>
                                            </MenuItem.CommandParameter>
                                            <MenuItem.IsChecked>
                                                <MultiBinding Converter="{StaticResource EqualsConverter}" Mode="OneWay">
                                                    <Binding Path="CurrentStatisticData.SkillDisplayLimit" />
                                                    <Binding Path="CommandParameter" RelativeSource="{RelativeSource Self}" />
                                                </MultiBinding>
                                            </MenuItem.IsChecked>
                                        </MenuItem>
                                        <MenuItem Command="{Binding SetSkillDisplayLimitCommand}" Header="{lex:Loc Key={x:Static loc:LocalizationKeys.Menu_SkillDisplay_Top15}}">
                                            <MenuItem.CommandParameter>
                                                <system:Int32>15</system:Int32>
                                            </MenuItem.CommandParameter>
                                            <MenuItem.IsChecked>
                                                <MultiBinding Converter="{StaticResource EqualsConverter}" Mode="OneWay">
                                                    <Binding Path="CurrentStatisticData.SkillDisplayLimit" />
                                                    <Binding Path="CommandParameter" RelativeSource="{RelativeSource Self}" />
                                                </MultiBinding>
                                            </MenuItem.IsChecked>
                                        </MenuItem>
                                        <MenuItem Command="{Binding SetSkillDisplayLimitCommand}" Header="{lex:Loc Key={x:Static loc:LocalizationKeys.Menu_SkillDisplay_All}}">
                                            <MenuItem.CommandParameter>
                                                <system:Int32>0</system:Int32>
                                            </MenuItem.CommandParameter>
                                            <MenuItem.IsChecked>
                                                <MultiBinding Converter="{StaticResource EqualsConverter}" Mode="OneWay">
                                                    <Binding Path="CurrentStatisticData.SkillDisplayLimit" />
                                                    <Binding Path="CommandParameter" RelativeSource="{RelativeSource Self}" />
                                                </MultiBinding>
                                            </MenuItem.IsChecked>
                                        </MenuItem>
                                    </MenuItem>
                                    <!--  历史记录  -->
                                    <MenuItem Header="{lex:Loc Key={x:Static loc:LocalizationKeys.Menu_History}}" ItemContainerStyle="{StaticResource CheckableMenuItem}" />
                                    <!--  打桩模式  -->
                                    <MenuItem Header="{lex:Loc Key={x:Static loc:LocalizationKeys.Menu_Training}}" ItemContainerStyle="{StaticResource CheckableMenuItem}">
                                        <MenuItem
                                            Click="PilingMenuItem_Click"
                                            Header="{lex:Loc Key={x:Static loc:LocalizationKeys.Menu_Training_Personal}}"
                                            IsCheckable="True" />
                                        <MenuItem
                                            Click="PilingMenuItem_Click"
                                            Header="{lex:Loc Key={x:Static loc:LocalizationKeys.Menu_Training_Faction}}"
                                            IsCheckable="True" />
                                        <MenuItem
                                            Click="PilingMenuItem_Click"
                                            Header="{lex:Loc Key={x:Static loc:LocalizationKeys.Menu_Training_Extreme}}"
                                            IsCheckable="True" />
                                    </MenuItem>

                                    <MenuItem Header="{lex:Loc Key={x:Static loc:LocalizationKeys.Menu_SkillDiary}}" />

                                    <Separator />
                                    <MenuItem Command="{Binding ShutdownCommand}" Header="{lex:Loc Key={x:Static loc:LocalizationKeys.Menu_Exit}}" />
                                </ContextMenu>
                            </Button.ContextMenu>
                        </Button>
                        <!--  隐藏按钮  -->
                        <Button
                            x:Name="PullButton"
                            Width="22"
                            Click="PullButton_Click"
                            Content="&#xE601;"
                            RenderTransformOrigin="0.5,0.5">
                            <Button.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <SkewTransform />
                                    <RotateTransform Angle="0" />
                                    <TranslateTransform />
                                </TransformGroup>
                            </Button.RenderTransform>
                        </Button>
                    </StackPanel>
                </Grid>
            </Border>

            <Border Grid.Row="1" Style="{StaticResource SortedDpsBorder}">
                <ctrl:SortedDpsControl
                    ItemTemplate="{StaticResource ProgressBarDataTemplate}"
                    ItemsSource="{Binding CurrentStatisticData.Data}"
                    SelectedItem="{Binding CurrentStatisticData.SelectedSlot}" />
            </Border>

            <Border
                x:Name="LoadingGridHost"
                Grid.Row="2"
                ClipToBounds="True"
                Style="{StaticResource LoadingGrid}">

                <Rectangle x:Name="LoadingStripe" Style="{StaticResource LoadingBlockRectangle}">
                    <Rectangle.Triggers>
                        <EventTrigger RoutedEvent="Loaded">
                            <BeginStoryboard>
                                <Storyboard RepeatBehavior="Forever">
                                    <DoubleAnimation
                                        AccelerationRatio="0.2"
                                        DecelerationRatio="0.2"
                                        Storyboard.TargetName="LoadingStripe"
                                        Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)"
                                        Duration="0:0:1.6">
                                        <DoubleAnimation.From>
                                            <Binding
                                                Converter="{StaticResource DoubleNegateConverter}"
                                                ElementName="LoadingStripe"
                                                Path="ActualWidth" />
                                        </DoubleAnimation.From>
                                        <DoubleAnimation.To>
                                            <MultiBinding Converter="{StaticResource DoubleSumConverter}">
                                                <Binding ElementName="LoadingGridHost" Path="ActualWidth" />
                                                <Binding ElementName="LoadingStripe" Path="ActualWidth" />
                                            </MultiBinding>
                                        </DoubleAnimation.To>
                                    </DoubleAnimation>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </Rectangle.Triggers>
                    <Rectangle.Fill>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1, 0">
                            <GradientStop Offset="0" Color="#00569CD6" />
                            <GradientStop Offset="0.4" Color="#FF569CD6" />
                            <GradientStop Offset="0.6" Color="#FF569CD6" />
                            <GradientStop Offset="1" Color="#00569CD6" />
                        </LinearGradientBrush>
                    </Rectangle.Fill>
                </Rectangle>
            </Border>

            <Border
                x:Name="ContentBorder"
                Grid.Row="3"
                Style="{StaticResource FooterContentBorder}">
                <Grid Margin="6">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <TextBlock
                        Grid.Column="0"
                        HorizontalAlignment="Left"
                        Style="{StaticResource FooterTextContent}"
                        Text="{Binding CurrentStatisticData.CurrentPlayerSlot.Index, StringFormat=[{0}], TargetNullValue=[--], FallbackValue=[--]}" />
                    <TextBlock
                        Grid.Column="1"
                        Margin="6,0,0,0"
                        HorizontalAlignment="Left"
                        Style="{StaticResource FooterTextContent}"
                        Text="{Binding Path=BattleDuration, StringFormat={}{0:mm\\:ss}}" />
                    <TextBlock
                        Grid.Column="2"
                        Margin="0,0,4,0"
                        HorizontalAlignment="Right"
                        Style="{StaticResource FooterTextContent}"
                        TextAlignment="Right">
                        <TextBlock.Text>
                            <MultiBinding Converter="{StaticResource HumanReadableNumberConverter}">
                                <Binding
                                    FallbackValue="--"
                                    Path="CurrentStatisticData.CurrentPlayerSlot.Value"
                                    TargetNullValue="--" />
                                <Binding Path="DataContext.NumberDisplayMode" RelativeSource="{RelativeSource AncestorType=Window}" />
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                </Grid>
            </Border>

        </Grid>
    </Border>


</Window>
